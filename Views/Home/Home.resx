<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>